# runtime's Hardsuit controller v2.0.0

############
# FEATURES #
############
# If your helmet needs flushing, it will beep at you.
# If the environment is probably unsafe, it closes and locks your helmet.
# Not all types of unsafe environment can be detected. Keeping your helmet closed is on you!
# It will micromanage your filter, greatly prolonging its lifespan.
# Filtering will temporarily fuck with pressure setting to avoid dumping O2 to waste.
# It will turn the AC off if the temperature is safe.
# Otherwise, it will set your AC to the most extreme but still safe value.
# It will turn off air flow when your helmet is open.

#############
# icX notes #
#############
# icX sometimes generates stupid code for ifs:
# Sometimes it just wastes instructions,but sometimes it borks the output completely
# and generates invalid ic10. For this reason most of my branching has been done in
# straight ic10 vs using if.
#
# icX uses lower registers for variables and higher registers for temporary results.
# We can actually sneak our own usage out of the high registers without breaking icX.
#
# icX sometimes breaks subtly if you use comments after a line. For this reason
# I only do full-line comments.

############
# THE CODE #
############

# This is needed
use loop

# This is useful for debugging ic10 generation
use aliases
use comments
# cannot `use constants` if you use arithmetic in constants

#############
# Constants #
#############

# Used for celsius/kelvin conversion.
const ZERO_CELSIUS = 273.15
# -10C for real, but suit lady yells. So we'll do 1.
const MINIMUM_TEMPERATURE = ZERO_CELSIUS + 1
# +50C for real. Not sure if suit lady yells. We'll do 39.
const MAXIMUM_TEMPERATURE = ZERO_CELSIUS + 39
# anything beneath this we treat as zero
const LOW_PRESSURE = 1
# if we drop below this partial pressure, we need to start filtering
const MINIMUM_OXYGEN_PARTIAL_PRESSURE = 20
# if we have at least this ratio of oxygen, we're good to stop filtering
const MAXIMUM_OXYGEN_RATIO = 0.95
# Expected minimum oxygen ratio you'll encounter
const EXPECTED_MINIMUM_AIRMIX_OXYGEN_RATIO = 0.22
# 20 kPa for 100% O2, but anything less than MINIMUM_PRESSURE is bad for airmix
const MINIMUM_PRESSURE = MINIMUM_OXYGEN_PARTIAL_PRESSURE / EXPECTED_MINIMUM_AIRMIX_OXYGEN_RATIO
# 600 kPa, but anything more than 200 kPa is suss
const MAXIMUM_PRESSURE = 200
# how much non-O2 non-C02 gas do we allow?
const ACCEPTABLE_MYSTERY_GAS = 0.001
# how much of the gas in a closed helmet should be accounted for (O2 and CO2 are the only expected gasses)
const GOOD_GAS_EXPECTED_RATIO = 1 - ACCEPTABLE_MYSTERY_GAS
# normal release pressure in kPa. Min is 0, max is 202.65
const DEFAULT_PRESSURE_SETTING = 101.325
# maximum volatiles ratio in 1atm helmet before we scream
const MAXIMUM_VOLATILES_RATIO = 0.01
const MAXIMUM_VOLATILES_PARTIAL_PRESSURE = DEFAULT_PRESSURE_SETTING * MAXIMUM_VOLATILES_RATIO
# maximum volatiles ratio in 1atm helmet before we scream
const MAXIMUM_POLLUTANT_RATIO = 0.01
const MAXIMUM_POLLUTANT_PARTIAL_PRESSURE = DEFAULT_PRESSURE_SETTING * MAXIMUM_POLLUTANT_RATIO
# maximum nitrous oxide ratio in 1atm helmet before we scream
const MAXIMUM_NITROUS_OXIDE_RATIO = 0.01
const MAXIMUM_NITROUS_OXIDE_PARTIAL_PRESSURE = DEFAULT_PRESSURE_SETTING * MAXIMUM_NITROUS_OXIDE_RATIO
# we must hit this pressure before we consider our flush complete
const FLUSH_PRESSURE_TARGET = 1

##################
# Device aliases #
##################
# The hardsuit just does these, so this is guaranteed good for any player's setup.
alias suit   db
alias helmet d0
alias pack   d1

# is it safe to assume that it's 100% O2 inside the tank?
# can I actually test that?
# in practice if the tank is not 100% O2 the program will yell at you due to the bad air detection.

# are we currently flushing?
var flushing

# are we currently filtering?
var filtering

# is the helmet closed?
# Note that we save both helmetOpen and helmetClosed for later as we'll need them in many places
var helmetClosed

# main loop starts here, and ends at EOF

# drive air release = !helmetOpen
var helmetOpen = helmet.Open
seqz helmetClosed helmetOpen
suit.AirRelease = helmetClosed

# get oxygen partial pressure
var helmetOxygenRatio = helmet.RatioOxygen

# get helmet pressure
var helmetPressure = helmet.Pressure

# This next bit is stupid.
# I can't actually flush your helmet.
# BUT, I can beep at you annoyingly until you do it yourself.
# Also, I can do a horrible "fake" flush that is very slow.

# calculate sum of the two good ratios
r15 = helmet.RatioCarbonDioxide
r15 = r15 + helmetOxygenRatio
# r15 is now totalGoodRatio

# check each of the toxin partial pressures.
# basically 3 of these:
# toxinDetected |= ratio * pressure >= threshold
r13 = helmet.RatioNitrousOxide
mul r13 r13 helmetPressure
sge r14 r13 MAXIMUM_NITROUS_OXIDE_PARTIAL_PRESSURE
r13 = helmet.RatioPollutant
mul r13 r13 helmetPressure
sge r13 r13 MAXIMUM_POLLUTANT_PARTIAL_PRESSURE
or r14 r14 r13
r13 = helmet.RatioVolatiles
mul r13 r13 helmetPressure
sge r13 r13 MAXIMUM_VOLATILES_PARTIAL_PRESSURE
or r14 r14 r13
# r14 is now toxinDetected

# if ((totalGoodRatio < GOOD_GAS_EXPECTED_RATIO) && helmetClosed) || toxinDetected
#     suit.Error = !suit.Error
#     flushing = 1
# else
#     suit.Error = 0
slt r13 r15 GOOD_GAS_EXPECTED_RATIO
and r13 r13 helmetClosed
or r13 r13 r14
# selection done, we no longer need r14 or r15
r15 = suit.Error
# r15 = !r15
seqz r15 r15
and r15 r15 r13
suit.Error = r15
or flushing flushing r13

# clamp AC temperature setting to safe range
var unsafe = 0
var temperature
var externalPressure = suit.PressureExternal

# handle temperature in vacuum-like conditions
# 4 instructions for an if/else. compare,load,select is 3.
# if externalPressure >= LOW_PRESSURE
#     temperature = 0
# else
#     temperature = suit.TemperatureExternal
sge r15 externalPressure LOW_PRESSURE
r14 = suit.TemperatureExternal
select temperature r15 0 r14

# clamp temperature to MINIMUM_TEMPERATURE
# if temperature < MINIMUM_TEMPERATURE
#     temperature = MINIMUM_TEMPERATURE
#     unsafe = 1
slt r15 temperature 274
select temperature r15 MINIMUM_TEMPERATURE temperature
or unsafe unsafe r15

# clamp temperature to MAXIMUM_TEMPERATURE
# if temperature > MAXIMUM_TEMPERATURE
#     temperature = MAXIMUM_TEMPERATURE
#     unsafe = 1
sgt r14 temperature 318
select temperature r14 MAXIMUM_TEMPERATURE temperature
or unsafe unsafe r14

# NOTE THAT WE USE r15 AND r14 FROM THE PREVIOUS BLOCK HERE!!! DO NOT REORDER!
# I don't trust the AC strength enough to toggle it on and off over time
# If external temperature is in good range, turn the AC off
# Suit.On = temperature < MINIMUM_TEMPERATURE || temperature > MAXIMUM_TEMPERATURE
or r15 r14 r15
suit.On = r15

# Set the target temperature to our clamped external temperature
suit.TemperatureSetting = temperature

# check if pressure is outside of safe range.
# if externalPressure < MINIMUM_PRESSURE || externalPressure > MAXIMUM_PRESSURE
#     unsafe = 1
slt r15 externalPressure MINIMUM_PRESSURE
sgt r14 externalPressure MAXIMUM_PRESSURE
or r13 r15 r14
or unsafe unsafe r13

# check for if we need to filter
# This will start filtering once oxygen partial pressure is at the safety threshold
# This will stop filtering once the helmet is MAXIMUM_OXYGEN_RATIO% oxygen
# It also stops filtering when the helmet is open.
# calculate helmetOxygenPressure and store it as r15
r15 = helmetPressure * helmetOxygenRatio
# filtering = (helmetOxygenPressure < MINIMUM_OXYGEN_PARTIAL_PRESSURE) || (filtering && helmetOxygenRatio < MAXIMUM_OXYGEN_RATIO) && helmetClosed
slt r15 r15 MINIMUM_OXYGEN_PARTIAL_PRESSURE
slt r14 helmetOxygenRatio MAXIMUM_OXYGEN_RATIO
and r14 filtering r14
or filtering r15 r14
and filtering filtering helmetClosed

# Fuck with pressure while filtering to avoid dumping O2 to waste
select r15 filtering externalPressure DEFAULT_PRESSURE_SETTING
suit.PressureSetting = r15

# Drive the filter state
suit.Filtration = filtering

# handle unsafe external environment
# if unsafe && helmetOpen
and r15 unsafe helmetOpen
beqz r15 skip_helmet_close
    # unlock the helmet
    helmet.Lock = 0
    yield
    # then close the helmet
    helmet.Open = 0
    yield
    # this is weird because we steal control from our for 2 ticks to do this.
    # however, getting that helmet closed is our absolute highest priority.
skip_helmet_close:

# finally, set the helmet to the desired lock state
helmet.Lock = unsafe

yield
