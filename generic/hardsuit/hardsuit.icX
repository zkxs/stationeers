#############
# icX notes #
#############
# icX usually generates stupid code for ifs:
# Sometimes it just wastes instructions, but sometimes it borks the output completely
# and generates invalid ic10. For this reason all of my branching has been done in
# straight ic10 vs using icX if statements.
#
# icX uses lower registers for variables and higher registers for temporary results.
# We can actually sneak our own usage out of the high registers without breaking icX.
#
# icX sometimes breaks subtly if you use comments after a line. For this reason
# I only do full-line comments.

##################
# Register Notes #
##################
# r0 - r9 are reserved for specific variables
# r13 - r15 are temporary registers
# This leaves r10 - r12, ra, and sp free

###############
# DEBUG STUFF #
###############
#use aliases
#use comments
# cannot `use constants` because I use arithmetic in my const definitions

#############
# Constants #
#############

# Used for celsius/kelvin conversion.
const ZERO_CELSIUS = 273.15
# one atmosphere in kPa
const ONE_ATMOSPHERE = 101.325
# -10C for real, but suit lady warns at 0C
const MINIMUM_TEMPERATURE = ZERO_CELSIUS - 10
# +80C for real, but suit lady warns at 40C
const MAXIMUM_TEMPERATURE = ZERO_CELSIUS + 80
# anything beneath this pressure we treat as vacuum
const LOW_PRESSURE = 1
# Extra kPa of total internal pressure to keep around for safety
const MINIMUM_SAFE_PRESSURE_FUDGE_FACTOR = 5
# pressure below which humans take damage is 0.001. Suit warning at 20 kPa. Suit critical at 6.3 kPa.
const MINIMUM_SAFE_PRESSURE = 6.3 + MINIMUM_SAFE_PRESSURE_FUDGE_FACTOR
# I can't see a point at which pressure directly damages you? We'll just make this effectively infinite.
const MAXIMUM_SAFE_PRESSURE = 9999999999
# minimum release pressure in kPa. This isn't clamped so this lets us flush at maximum speed, even as we near 0kPa.
const MINIMUM_RELEASE_PRESSURE_SETTING = -9999999999
# maximum release pressure in kPa. UI only lets you go to 202.65. Suit critical alarm at 607.95. Suit warning alarm at half that. 
const MAXIMUM_RELEASE_PRESSURE_SETTING = 607.95
# if we drop below 16 kPa, we start suffocating. Used for safety checks.
const MINIMUM_OXYGEN_PARTIAL_PRESSURE = 16
# extra kPa of O2 to keep around so that we aren't EXACTLY on the edge of suffocation
const MINIMUM_OXYGEN_FUDGE_FACTOR = 1.1
# how much O2 partial pressure we want to keep in the helmet
const TARGET_OXYGEN_PARTIAL_PRESSURE = MINIMUM_OXYGEN_PARTIAL_PRESSURE + MINIMUM_OXYGEN_FUDGE_FACTOR
# if we have more than this total internal pressure, we should start filtering. We'll keep 10 kPa in reserve in case weird thermal expansion stuff happens.
const TARGET_TOTAL_PRESSURE = MAXIMUM_RELEASE_PRESSURE_SETTING - 10
# extra oxygen partial pressure kPa to inject briefly before filtering
const PRE_FILTER_EXTRA_OXYGEN = 2
# oxygen partial pressure kPa to target briefly before filtering
const PRE_FILTER_OXYGEN_PARTIAL_PRESSURE = TARGET_OXYGEN_PARTIAL_PRESSURE + PRE_FILTER_EXTRA_OXYGEN
# point at which to inject the PRE_FILTER_EXTRA_OXYGEN
const PRE_FILTER_THRESHOLD = TARGET_TOTAL_PRESSURE - PRE_FILTER_EXTRA_OXYGEN
# if we have less than this partial pressure of CO2, we're good to stop filtering
const TARGET_CARBON_DIOXIDE_PARTIAL_PRESSURE = 5
# Expected minimum oxygen ratio you'll encounter
const EXPECTED_MINIMUM_AIRMIX_OXYGEN_RATIO = 0.22
# 20 kPa for 100% O2, but anything less than MINIMUM_ENVIRONMENT_PRESSURE is bad for airmix
const MINIMUM_ENVIRONMENT_PRESSURE = MINIMUM_OXYGEN_PARTIAL_PRESSURE / EXPECTED_MINIMUM_AIRMIX_OXYGEN_RATIO
# 607.95 kPa, but anything more than 2 atm is suss
const MAXIMUM_ENVIRONMENT_PRESSURE = ONE_ATMOSPHERE * 2
# how much guaranteed kPa of room for CO2 do I want to have? If this is too low the filters could get stuck on.
const CARBON_DIOXIDE_WORKING_PRESSURE = 20
# how much non-O2 non-C02 gas do we allow?
const MAXIMUM_MYSTERY_GAS_PARTIAL_PRESSURE = TARGET_TOTAL_PRESSURE - PRE_FILTER_OXYGEN_PARTIAL_PRESSURE - CARBON_DIOXIDE_WORKING_PRESSURE
# maximum toxin partial pressure in kPa before things are bad for humans
const MAXIMUM_TOXIN_PARTIAL_PRESSURE = 0.5
# maximum nitrous oxide partial pressure before we start getting stunned
const MAXIMUM_NITROUS_OXIDE_PARTIAL_PRESSURE = 5

##################
# Device aliases #
##################
# The hardsuit just does these, so this is guaranteed good for any player's setup.
alias suit   db
alias helmet d0
alias pack   d1

############
# THE CODE #
############

# This is where the main loop begins
start_of_loop:

# handle if the helmet is missing
bdse helmet helmet_connected
suit.Filtration = 0
suit.AirRelease = 0
suit.On = 0
j end_of_loop
helmet_connected:

# Are we currently flushing?
# This is true if the internal atmosphere is contaminated.
var flushing

# Should the helmet be locked closed?
# This is true if the external atmosphere appears unsafe.
var unsafe

# Are we currently filtering CO2?
# We pull this state from the device instead of storing
# it internally to allow the user to trigger a filter.
var filtering = suit.Filtration

# Note that we save both helmetOpen and helmetClosed for later as we'll need them in many places
var helmetOpen = helmet.Open
var helmetClosed
seqz helmetClosed helmetOpen

# get helmet pressure
var internalPressure = helmet.Pressure

# get partial pressures of the expected gasses
var oxygenPartialPressure = helmet.RatioOxygen
oxygenPartialPressure = oxygenPartialPressure * internalPressure
var carbonDioxidePartialPressure = helmet.RatioCarbonDioxide
carbonDioxidePartialPressure = carbonDioxidePartialPressure * internalPressure

# This next bit is stupid.
# I can't actually flush your helmet.
# BUT, I can beep at you annoyingly until you do it yourself.
# Also, I can do a horrible "fake" flush that is very slow.

# calculate mysteryGasPressure
r15 = oxygenPartialPressure + carbonDioxidePartialPressure
# r15 is now totalGoodPressure
r15 = internalPressure - r15
# r15 is now mysteryGasPressure

# check each of the toxin partial pressures.
# toxinDetected = (pollutantRatio + volatilesRatio) * pressure >= threshold
r13 = helmet.RatioPollutant
r14 = helmet.RatioVolatiles
r13 = r13 + r14
r13 = r13 * internalPressure
sge r14 r13 MAXIMUM_TOXIN_PARTIAL_PRESSURE
# toxinDetected |= nitrousRatio * pressure >= threshold
r13 = helmet.RatioNitrousOxide
r13 = r13 * internalPressure
sge r13 r13 MAXIMUM_NITROUS_OXIDE_PARTIAL_PRESSURE
or r14 r14 r13
# r14 is now toxinDetected, we no longer need r13

# flushing = ((mysteryGasPressure > MAXIMUM_MYSTERY_GAS_PARTIAL_PRESSURE) && helmetClosed) || toxinDetected
# if flushing
#     suit.Error = !suit.Error
# else
#     suit.Error = 0
sgt flushing r15 MAXIMUM_MYSTERY_GAS_PARTIAL_PRESSURE
and flushing flushing helmetClosed
or flushing flushing r14
# selection done, we no longer need r14 or r15
r15 = suit.Error
# r15 = !r15
seqz r15 r15
and r15 r15 flushing
suit.Error = r15

var temperature
var externalPressure = suit.PressureExternal

# handle temperature in vacuum-like conditions
# 4 instructions for an if/else. compare,load,select is 3.
# if externalPressure < LOW_PRESSURE
#     temperature = 0
# else
#     temperature = suit.TemperatureExternal
slt r15 externalPressure LOW_PRESSURE
r14 = suit.TemperatureExternal
select temperature r15 0 r14

# if temperature < MINIMUM_TEMPERATURE
#     unsafe = 1
slt r15 temperature MINIMUM_TEMPERATURE
move unsafe r15

# if temperature > MAXIMUM_TEMPERATURE
#     unsafe = 1
sgt r14 temperature MAXIMUM_TEMPERATURE
or unsafe unsafe r14

# Always run the AC if the helmet is closed
suit.On = helmetClosed

# Set the target temperature to our desired temperature
suit.TemperatureSetting = MINIMUM_TEMPERATURE

# NOTE THAT WE STILL USE r15 AND r14 FROM THE PREVIOUS BLOCKS HERE!!! DO NOT REORDER!
# check if pressure is outside of safe range.
# if externalPressure < MINIMUM_ENVIRONMENT_PRESSURE || externalPressure > MAXIMUM_ENVIRONMENT_PRESSURE
#     unsafe = 1
slt r15 externalPressure MINIMUM_ENVIRONMENT_PRESSURE
sgt r14 externalPressure MAXIMUM_ENVIRONMENT_PRESSURE
or r13 r15 r14
or unsafe unsafe r13

# check if we need to be filtering
# This will start filtering once oxygen partial pressure is at the safety threshold
# This will stop filtering once the CO2 partial pressure drops below the target value
# It also stops filtering when the helmet is open.
# filtering = ((internalPressure > TARGET_TOTAL_PRESSURE)
#   || (
#     (internalPressure > MINIMUM_SAFE_PRESSURE)
#     && carbonDioxidePartialPressure > TARGET_CARBON_DIOXIDE_PARTIAL_PRESSURE
#     && filtering
#   )
# ) && helmetClosed
sgt r15 internalPressure MINIMUM_SAFE_PRESSURE
sgt r14 carbonDioxidePartialPressure TARGET_CARBON_DIOXIDE_PARTIAL_PRESSURE
and r15 r15 r14
and r15 r15 filtering
sgt r14 internalPressure TARGET_TOTAL_PRESSURE
or r15 r14 r15
and filtering r15 helmetClosed

# safety check to make sure we don't overpressure the suit
# internalPressureHigh = internalPressure > MAXIMUM_SAFE_PRESSURE
sgt r15 internalPressure MAXIMUM_SAFE_PRESSURE

# We must filter in order for the flush to work
# suit.Filtration = internalPressureHigh || flushing || filtering
or r15 r15 flushing
or r15 r15 filtering
suit.Filtration = r15

# helmet.Lock = unsafe && helmetClosed
and r15 unsafe helmetClosed
helmet.Lock = r15

# helmetDoesNotNeedClosing = !(unsafe || flushing)
# helmet.Open = helmet.Open && helmetDoesNotNeedClosing
nor r15 unsafe flushing
and r15 r15 helmetOpen
helmet.Open = r15

# calculate target O2 partial pressure
# if internalPressure > PRE_FILTER_THRESHOLD
#   targetOxygenPartialPressure = PRE_FILTER_OXYGEN_PARTIAL_PRESSURE
# else
#   targetOxygenPartialPressure = TARGET_OXYGEN_PARTIAL_PRESSURE
sgt r15 internalPressure PRE_FILTER_THRESHOLD
select r15 r15 PRE_FILTER_OXYGEN_PARTIAL_PRESSURE TARGET_OXYGEN_PARTIAL_PRESSURE
# if not filtering or flushing, the default pressure setting should be:
#   suit.PressureSetting = max((targetOxygenPartialPressure - oxygenPartialPressure) + internalPressure, MINIMUM_SAFE_PRESSURE)
r15 = r15 - oxygenPartialPressure
r15 = r15 + internalPressure
max r15 r15 MINIMUM_SAFE_PRESSURE
# r15 = targetPressure, done with r14

# Fuck with pressure while filtering to avoid dumping O2 to waste in hot environments.
# This is actually a bug, but the devs like it so they're leaving it in?
select r14 filtering MAXIMUM_RELEASE_PRESSURE_SETTING r15

# oxygenPartialPressureLow = oxygenPartialPressure < MINIMUM_OXYGEN_PARTIAL_PRESSURE
slt r13 oxygenPartialPressure MINIMUM_OXYGEN_PARTIAL_PRESSURE
# r13 is now oxygenPartialPressureLow. We need this further down.

# override the pressure back to default if oxygenPartialPressureLow is true
# (we aren't done with r13 yet)
select r14 r13 r15 r14

# Handle autoflush by setting the target pressure to zero
select r14 flushing MINIMUM_RELEASE_PRESSURE_SETTING r14
# r14 is now our desired pressure setting

suit.PressureSetting = r14

# suit.AirRelease = (!filtering || oxygenPartialPressureLow) && helmetClosed
# We don't care if we're flushing or not, as a 0kPa release pressure makes closing the release redundant
seqz r15 filtering
or r15 r15 r13
# (we used r13=oxygenPartialPressureLow from up above, and now we're done with it)
and r15 r15 helmetClosed
suit.AirRelease = r15

end_of_loop:
yield
j start_of_loop
