#############
# icX notes #
#############
# icX usually generates stupid code for ifs:
# Sometimes it just wastes instructions, but sometimes it borks the output completely
# and generates invalid ic10. For this reason all of my branching has been done in
# straight ic10 vs using icX if statements.
#
# icX uses lower registers for variables and higher registers for temporary results.
# We can actually sneak our own usage out of the high registers without breaking icX.
#
# icX sometimes breaks subtly if you use comments after a line. For this reason
# I only do full-line comments.

##############
# WEIRD SHIT #
##############
# While the suit has its own sensors, they suck. This is because the helmet and suit have separate
# atmospheres that mix over time. The helmet atmosphere is the actual important one that you breathe
# from, but the filtering is done in the suit. This means as you're filtering the helmet always lags
# behind the suit. What this means is you need to read the helmet gas ratios to actually know when
# you can stop filtering.
#
# You can set the temperatore/pressure settings to out of range values. They will display the set value
# even though functionally they are still clamped. This is useful, as you can abuse the settings as
# debug displays.
#
# Normal helmets actually have all the same logic values as a hardsuit helmet, and can be controlled
# perfectly fine via d0.

##################
# Register Notes #
##################
# r0 - r9 are reserved for specific variables
# r13 - r15 are temporary registers
# This leaves r10 - r12, ra, and sp free

###############
# DEBUG STUFF #
###############
#use aliases
#use comments
# cannot `use constants` because I use arithmetic in my const definitions

#############
# Constants #
#############

# Used for celsius/kelvin conversion.
const ZERO_CELSIUS = 273.15
# -10C for real, but suit lady yells. So we'll do 1.
const MINIMUM_TEMPERATURE = ZERO_CELSIUS + 1
# +50C for real. Not sure if suit lady yells. We'll do 39.
const MAXIMUM_TEMPERATURE = ZERO_CELSIUS + 39
# anything beneath this we treat as zero
const LOW_PRESSURE = 1
# if we drop below this partial pressure, we need to start filtering
const MINIMUM_OXYGEN_PARTIAL_PRESSURE = 20
# if we have less than this partial pressure of CO2, we're good to stop filtering
const TARGET_CO2_PARTIAL_PRESSURE = 3
# Expected minimum oxygen ratio you'll encounter
const EXPECTED_MINIMUM_AIRMIX_OXYGEN_RATIO = 0.22
# 20 kPa for 100% O2, but anything less than MINIMUM_ENVIRONMENT_PRESSURE is bad for airmix
const MINIMUM_ENVIRONMENT_PRESSURE = MINIMUM_OXYGEN_PARTIAL_PRESSURE / EXPECTED_MINIMUM_AIRMIX_OXYGEN_RATIO
# 600 kPa, but anything more than 200 kPa is suss
const MAXIMUM_ENVIRONMENT_PRESSURE = 202.65
# normal release pressure in kPa
const DEFAULT_PRESSURE_SETTING = 101.325
# minimum release pressure in kPa
const MINIMUM_RELEASE_PRESSURE_SETTING = 0
# maximum release pressure in kPa
const MAXIMUM_RELEASE_PRESSURE_SETTING = 202.65
# how much non-O2 non-C02 gas do we allow?
const MAXIMUM_MYSTERY_GAS_RATIO = 1 - (MINIMUM_OXYGEN_PARTIAL_PRESSURE / DEFAULT_PRESSURE_SETTING)
const MAXIMUM_MYSTERY_GAS_PARTIAL_PRESSURE = DEFAULT_PRESSURE_SETTING * MAXIMUM_MYSTERY_GAS_RATIO
# maximum volatiles ratio in 1 atm helmet before we scream
const MAXIMUM_VOLATILES_RATIO = 0.005
const MAXIMUM_VOLATILES_PARTIAL_PRESSURE = DEFAULT_PRESSURE_SETTING * MAXIMUM_VOLATILES_RATIO
# maximum volatiles ratio in 1 atm helmet before we scream
const MAXIMUM_POLLUTANT_RATIO = 0.0001
const MAXIMUM_POLLUTANT_PARTIAL_PRESSURE = DEFAULT_PRESSURE_SETTING * MAXIMUM_POLLUTANT_RATIO
# maximum nitrous oxide ratio in 1 atm helmet before we scream
const MAXIMUM_NITROUS_OXIDE_RATIO = 0.0001
const MAXIMUM_NITROUS_OXIDE_PARTIAL_PRESSURE = DEFAULT_PRESSURE_SETTING * MAXIMUM_NITROUS_OXIDE_RATIO

##################
# Device aliases #
##################
# The hardsuit just does these, so this is guaranteed good for any player's setup.
alias suit   db
alias helmet d0
alias pack   d1

############
# THE CODE #
############

# This is where the main loop begins
start_of_loop:

# handle if the helmet is missing
bdse helmet helmet_connected
suit.Filtration = 0
suit.AirRelease = 0
suit.On = 0
j end_of_loop
helmet_connected:

# Are we currently flushing?
# This is true if the internal atmosphere is contaminated.
var flushing

# Should the helmet be locked closed?
# This is true if the external atmosphere appears unsafe.
var unsafe

# Are we currently filtering CO2?
# We pull this state from the device instead of storing
# it internally to allow the user to trigger a filter.
var filtering = suit.Filtration

# Note that we save both helmetOpen and helmetClosed for later as we'll need them in many places
var helmetOpen = helmet.Open
var helmetClosed
seqz helmetClosed helmetOpen

# get helmet pressure
var internalPressure = helmet.Pressure

# get partial pressures of the expected gasses
var oxygenPartialPressure = helmet.RatioOxygen
oxygenPartialPressure = oxygenPartialPressure * internalPressure
var carbonDioxidePartialPressure = helmet.RatioCarbonDioxide
carbonDioxidePartialPressure = carbonDioxidePartialPressure * internalPressure

# This next bit is stupid.
# I can't actually flush your helmet.
# BUT, I can beep at you annoyingly until you do it yourself.
# Also, I can do a horrible "fake" flush that is very slow.

# calculate mysteryGasPressure
r15 = oxygenPartialPressure + carbonDioxidePartialPressure
# r15 is now totalGoodPressure
r15 = internalPressure - r15
# r15 is now mysteryGasPressure

# check each of the toxin partial pressures.
# basically 3 of these:
# toxinDetected |= ratio * pressure >= threshold
r13 = helmet.RatioNitrousOxide
r13 = r13 * internalPressure
sge r14 r13 MAXIMUM_NITROUS_OXIDE_PARTIAL_PRESSURE
r13 = helmet.RatioPollutant
r13 = r13 * internalPressure
sge r13 r13 MAXIMUM_POLLUTANT_PARTIAL_PRESSURE
or r14 r14 r13
r13 = helmet.RatioVolatiles
r13 = r13 * internalPressure
sge r13 r13 MAXIMUM_VOLATILES_PARTIAL_PRESSURE
or r14 r14 r13
# r14 is now toxinDetected, we no longer need r13

# flushing = ((mysteryGasPressure > MAXIMUM_MYSTERY_GAS_PARTIAL_PRESSURE) && helmetClosed) || toxinDetected
# if flushing
#     suit.Error = !suit.Error
# else
#     suit.Error = 0
sgt flushing r15 MAXIMUM_MYSTERY_GAS_PARTIAL_PRESSURE
and flushing flushing helmetClosed
or flushing flushing r14
# selection done, we no longer need r14 or r15
r15 = suit.Error
# r15 = !r15
seqz r15 r15
and r15 r15 flushing
suit.Error = r15

var temperature
var externalPressure = suit.PressureExternal

# handle temperature in vacuum-like conditions
# 4 instructions for an if/else. compare,load,select is 3.
# if externalPressure < LOW_PRESSURE
#     temperature = 0
# else
#     temperature = suit.TemperatureExternal
slt r15 externalPressure LOW_PRESSURE
r14 = suit.TemperatureExternal
select temperature r15 0 r14

# clamp temperature to MINIMUM_TEMPERATURE
# if temperature < MINIMUM_TEMPERATURE
#     temperature = MINIMUM_TEMPERATURE
#     unsafe = 1
slt r15 temperature MINIMUM_TEMPERATURE
select temperature r15 MINIMUM_TEMPERATURE temperature
move unsafe r15

# clamp temperature to MAXIMUM_TEMPERATURE
# if temperature > MAXIMUM_TEMPERATURE
#     temperature = MAXIMUM_TEMPERATURE
#     unsafe = 1
sgt r14 temperature MAXIMUM_TEMPERATURE
select temperature r14 MAXIMUM_TEMPERATURE temperature
or unsafe unsafe r14

# NOTE THAT WE USE r15 AND r14 FROM THE PREVIOUS TWO BLOCKS HERE!!! DO NOT REORDER!
# I don't trust the AC strength enough to toggle it on and off over time
# If external temperature is in good range, turn the AC off
# Suit.On = temperature < MINIMUM_TEMPERATURE || temperature > MAXIMUM_TEMPERATURE
or r13 r14 r15
suit.On = r13

# Set the target temperature to our clamped external temperature
suit.TemperatureSetting = temperature

# NOTE THAT WE STILL USE r15 AND r14 FROM THE PREVIOUS BLOCKS HERE!!! DO NOT REORDER!
# check if pressure is outside of safe range.
# if externalPressure < MINIMUM_ENVIRONMENT_PRESSURE || externalPressure > MAXIMUM_ENVIRONMENT_PRESSURE
#     unsafe = 1
slt r15 externalPressure MINIMUM_ENVIRONMENT_PRESSURE
sgt r14 externalPressure MAXIMUM_ENVIRONMENT_PRESSURE
or r13 r15 r14
or unsafe unsafe r13

# oxygenPartialPressureLow = oxygenPartialPressure < MINIMUM_OXYGEN_PARTIAL_PRESSURE
slt r13 oxygenPartialPressure MINIMUM_OXYGEN_PARTIAL_PRESSURE
# r13 is now oxygenPartialPressureLow. We need this in a few places further down.

# check if we need to be filtering
# This will start filtering once oxygen partial pressure is at the safety threshold
# This will stop filtering once the CO2 partial pressure drops below the target value
# It also stops filtering when the helmet is open.
# filtering = (
#   oxygenPartialPressureLow
#   || (
#       (carbonDioxidePartialPressure > TARGET_CO2_PARTIAL_PRESSURE)
#       && filtering
#   )
#) && helmetClosed
sgt r15 carbonDioxidePartialPressure TARGET_CO2_PARTIAL_PRESSURE
and r15 r15 filtering
or r15 r13 r15
and filtering r15 helmetClosed

# safety check to make sure we don't overpressure the suit
# internalPressureHigh = internalPressure > MAXIMUM_RELEASE_PRESSURE_SETTING
sgt r15 internalPressure MAXIMUM_RELEASE_PRESSURE_SETTING

# We must filter in order for the flush to work
# suit.Filtration = internalPressureHigh || flushing || filtering
or r15 r15 flushing
or r15 r15 filtering
suit.Filtration = r15

# helmet.Lock = unsafe && helmetClosed
and r15 unsafe helmetClosed
helmet.Lock = r15

# helmetDoesNotNeedClosing = !(unsafe || flushing)
# helmet.Open = helmet.Open && helmetDoesNotNeedClosing
nor r15 unsafe flushing
and r15 r15 helmetOpen
helmet.Open = r15

# Fuck with pressure while filtering to avoid dumping O2 to waste in hot environments.
# This is actually a bug, but the devs like it so they're leaving it in?
select r15 filtering MAXIMUM_RELEASE_PRESSURE_SETTING DEFAULT_PRESSURE_SETTING

# override the pressure back to default if oxygenPartialPressureLow == 1
# (this is where we finally use r13 from up in the filtering calculation, but we still aren't done with it)
select r15 r13 DEFAULT_PRESSURE_SETTING r15

# Handle autoflush by setting the target pressure to zero
select r15 flushing MINIMUM_RELEASE_PRESSURE_SETTING r15
# r15 is now our desired pressure setting
suit.PressureSetting = r15

# suit.AirRelease = (!filtering || oxygenPartialPressureLow) && helmetClosed
# We don't care if we're flushing or not, as a 0kPa release pressure makes closing the release redundant
# (again we use r13 from up in the filtering calculation, but now we'rd done with it)
seqz r15 filtering
or r15 r15 r13
and r15 r15 helmetClosed
suit.AirRelease = r15

end_of_loop:
yield
j start_of_loop
